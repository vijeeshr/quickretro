# Example with running multiple services of same image with replicas, load balanced by Docker internally.

# Run docker compose.
#   docker compose -f compose.replicas.yml up
# To stop and remove compose created items
#   docker compose -f compose.replicas.yml down --rmi "all" --volumes

services:
  redis:
    image: "redis:8.0.1-alpine"
    ############## Redis ACL ##############
    # volumes:
    #   - ./redis/users.acl:/usr/local/etc/redis/users.acl
    # command: redis-server --aclfile /usr/local/etc/redis/users.acl
    # # command: ["redis-server", "--aclfile", "/usr/local/etc/redis/users.acl"]
    ############## Redis ACL ##############
    restart: always
    networks:
      - redisnet
    # ports:
    #   - "6379:6379"
    expose:
      - 6379

  app:
    build:
      context: .
      dockerfile: build.Dockerfile
    restart: unless-stopped  
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - redis
    environment:
      # Load from .env file in same directory as the compose file. 
      # To create file, in CLI: echo "REDIS_CONNSTR=redis://redis:6379/0" > .env
      # DO NOT create file from Windows. It creates Unicode text, UTF-16, little-endian text, with CRLF line terminators.
      - REDIS_CONNSTR=${REDIS_CONNSTR}  
      # Default Redis (No Auth or ACL). Outside docker - redis://localhost:6379/0
      # - REDIS_CONNSTR=redis://redis:6379/0 
      # Using Redis ACL with Username & Password. Outside docker - redis://app-user:mysecretpassword@localhost:6379/0
      # - REDIS_CONNSTR=redis://app-user:mysecretpassword@redis:6379/0
      - TURNSTILE_ENABLED=${TURNSTILE_ENABLED}
      - TURNSTILE_SITE_KEY=${TURNSTILE_SITE_KEY}
      - TURNSTILE_SECRET_KEY=${TURNSTILE_SECRET_KEY}          
    networks:
      - redisnet
      - proxynet
    expose:
      - 8080

  caddy:
    image: caddy:2.10.0-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    depends_on:
      - app
    networks:
      - proxynet          
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./site:/srv
      - caddy_data:/data
      - caddy_config:/config

volumes:
  caddy_data:
  caddy_config:      

networks:
  redisnet:
    name: redisnet
  proxynet:
    name: proxynet